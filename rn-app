Klar! Hier ist eine detaillierte Anleitung, wie du dein bestehendes Web-Frontend mit React Native als mobile App umsetzt und mit deinem Backend verbindest.

# Detaillierter Implementationsplan: Intranet-Projekt als React Native App

## Aktuelle Implementierung

Die mobile App ist als React Native Anwendung im `/app`-Ordner implementiert. Nachdem es Probleme mit der Ordnerstruktur gab, wurde die Struktur bereinigt, um eine klare Organisation zu gewährleisten.

### Aktueller Ordneraufbau

```
/intranet
  /backend          # Bestehendes Backend (unverändert)
  /frontend         # Web-Frontend (unverändert)
  /app              # React Native Frontend
    /android        # Native Android-Konfiguration
    /src            # React Native App-Quellcode
    /patches        # Patches für Problem-Bibliotheken
    /node_modules   # Abhängigkeiten
    index.js        # App-Einstiegspunkt
    app.json        # App-Konfiguration
    package.json    # Abhängigkeiten und Skripte
```

### Installierte Abhängigkeiten

Die wichtigsten Abhängigkeiten sind:
- react@18.1.0
- react-native@0.70.6
- @react-navigation/* (Stack, Tabs, etc.)
- axios für API-Aufrufe
- AsyncStorage für lokale Datenspeicherung
- Verschiedene UI-Bibliotheken wie react-native-paper

### Implementierte Komponenten

- **LoginScreen:** Authentifizierungsbildschirm
- **WorktimeScreen:** Zeiterfassung
- **AuthContext:** Authentifizierungsverwaltung
- **API-Integration:** Verbindung zum Backend-Server

### Bekannte Probleme

1. **AndroidManifest.xml:** Es gab mehrere Versionen, die zu Build-Fehlern führten. Jetzt ist nur noch eine korrekte Version mit dem package-Attribut vorhanden.

2. **Doppelte Verzeichnisse:** Es gab doppelte Android- und src-Ordner, die entfernt wurden.

3. **React Native vs. Expo:** Die App wurde mit React Native erstellt, aber es gab Versuche, Expo einzubinden, was zu Konflikten führte. Jetzt wird ausschließlich React Native verwendet.

4. **AAR-Dateien vs. Maven:** React Native 0.72.4+ verwendet Maven Central für Bibliotheken statt AAR-Dateien. Um Kompatibilitätsprobleme zu vermeiden, wurde auf Version 0.70.6 zurückgegriffen, die besser mit den Native-Modulen funktioniert.

## Anleitung zur Weiterentwicklung

### Starten der App

1. **Terminal öffnen und zum app-Ordner navigieren:**
```bash
cd app
```

2. **Metro-Bundler starten:**
```bash
npx react-native start
```

3. **App auf Android-Gerät oder Emulator starten:**
```bash
npx react-native run-android
```

### Neue Funktionen hinzufügen

1. **Neue Screens erstellen:**
```bash
touch src/screens/NewScreen.tsx
```

2. **Screen in Navigation einbinden:**
```typescript
// src/navigation/index.tsx
import NewScreen from '../screens/NewScreen';

// ...

<Tab.Screen 
  name="NewScreen" 
  component={NewScreen} 
  options={{
    title: 'Neuer Screen',
  }}
/>
```

3. **API-Endpunkte hinzufügen:**
```typescript
// src/api/apiClient.ts
export const newApi = {
  getData: () => apiClient.get('/new-endpoint'),
  createItem: (data) => apiClient.post('/new-endpoint', data),
  // ...
};
```

### Debugging

1. **Android Debug Bridge (logcat):**
```bash
adb logcat *:S ReactNative:V ReactNativeJS:V
```

2. **React Native Debugger einrichten:**
```bash
npm install -g react-native-debugger
```

3. **Metro-Bundler-Logs:** Im Terminal, wo Metro läuft, werden Fehler angezeigt.

### Bekannte Fehlerquellen

1. **Native-Module aktualisieren:** Nach Änderungen an nativen Modulen:
```bash
cd android && ./gradlew clean
```

2. **Cache leeren:**
```bash
npx react-native start --reset-cache
```

3. **JavaScript-Bundle leeren:**
```bash
cd android && ./gradlew clean
```

## Implementierungsdetails

### Auth-Flow

Die Authentifizierung verwendet AsyncStorage zum Speichern des JWT-Tokens:

```typescript
// Auth-Token speichern
await AsyncStorage.setItem('token', responseToken);

// Token für Requests verwenden
axiosInstance.interceptors.request.use(async (config) => {
  const token = await AsyncStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});
```

### Offline-Modus

Für zukünftige Implementierung: Lokales Speichern von Zeiterfassungseinträgen und spätere Synchronisierung:

```typescript
// Zeiteintrag lokal speichern, wenn offline
const saveOfflineTimeEntry = async (entry) => {
  const offlineEntries = await AsyncStorage.getItem('offlineTimeEntries');
  const entries = offlineEntries ? JSON.parse(offlineEntries) : [];
  entries.push({...entry, offlineId: Date.now()});
  await AsyncStorage.setItem('offlineTimeEntries', JSON.stringify(entries));
};

// Bei Wiederverbindung synchronisieren
const syncOfflineEntries = async () => {
  const offlineEntries = await AsyncStorage.getItem('offlineTimeEntries');
  if (offlineEntries) {
    const entries = JSON.parse(offlineEntries);
    for (const entry of entries) {
      try {
        await worktimeApi.create(entry);
      } catch (error) {
        console.error('Sync error:', error);
      }
    }
    await AsyncStorage.removeItem('offlineTimeEntries');
  }
};
```

## Roadmap

1. **Aktuelle Phase:** Basis-Funktionalität mit Login und Zeiterfassung
2. **Nächste Schritte:**
   - Dashboard-Screen implementieren
   - Profilmanagement hinzufügen
   - Offline-Modus vervollständigen
3. **Spätere Phasen:**
   - Push-Benachrichtigungen
   - Kamera-Integration
   - Biometrische Authentifizierung

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                       @id @default(autoincrement())
  username                 String                    @unique
  password                 String
  firstName                String
  lastName                 String
  birthday                 DateTime?
  bankDetails              String?
  contract                 String?
  salary                   Float?
  normalWorkingHours       Float                     @default(7.6)
  approvedOvertimeHours    Float                     @default(0)
  country                  String                    @default("CO")
  language                 String                    @default("es")
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  email                    String                    @unique
  payrollCountry           String                    @default("CH")
  hourlyRate               Decimal?
  contractType             String?
  monthlySalary            Float?
  identificationNumber     String?                   // Pers√∂nliche ID-Nummer
  taxIdentificationNumber  String?                   // Steuer-ID
  employeeNumber           String?                   // Mitarbeiternummer/Personalnummer
  carticlesCreated         CerebroCarticle[]         @relation("CarticleCreator")
  carticlesUpdated         CerebroCarticle[]         @relation("CarticleUpdater")
  externalLinks            CerebroExternalLink[]
  cerebroMedia             CerebroMedia[]
  payrolls                 EmployeePayroll[]
  notifications            Notification[]
  requestsRequester        Request[]                 @relation("requester")
  requestsResponsible      Request[]                 @relation("responsible")
  settings                 Settings?
  tasksQualityControl      Task[]                    @relation("quality_control")
  tasksResponsible         Task[]                    @relation("responsible")
  userNotificationSettings UserNotificationSettings?
  roles                    UserRole[]
  tableSettings            UserTableSettings[]
  branches                 UsersBranches[]
  workTimes                WorkTime[]
  identificationDocuments  IdentificationDocument[]  // Neue Beziehung
  savedFilters             SavedFilter[]
  consultationInvoices     ConsultationInvoice[]
  invoiceSettings          InvoiceSettings?
  monthlyReports           MonthlyConsultationReport[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  permissions Permission[]
  users       UserRole[]
  tasks       Task[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  lastUsed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model Permission {
  id          Int      @id @default(autoincrement())
  roleId      Int
  entity      String
  entityType  String   @default("page")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  accessLevel String
  role        Role     @relation(fields: [roleId], references: [id])
}

model Branch {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  requests  Request[]
  tasks     Task[]
  users     UsersBranches[]
  workTimes WorkTime[]
}

model UsersBranches {
  id        Int      @id @default(autoincrement())
  userId    Int
  branchId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch   @relation(fields: [branchId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, branchId])
}

model WorkTime {
  id        Int       @id @default(autoincrement())
  userId    Int
  branchId  Int
  startTime DateTime
  endTime   DateTime?
  timezone  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clientId    Int?
  client      Client?   @relation(fields: [clientId], references: [id])
  notes       String?   @db.Text
  taskLinks   WorkTimeTask[]
  invoiceItems ConsultationInvoiceItem[]
  monthlyReportId Int?
  monthlyReport   MonthlyConsultationReport? @relation(fields: [monthlyReportId], references: [id])
  branch    Branch    @relation(fields: [branchId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Task {
  id               Int                   @id @default(autoincrement())
  title            String
  description      String?
  status           TaskStatus            @default(open)
  responsibleId    Int?
  roleId           Int?
  qualityControlId Int
  branchId         Int
  dueDate          DateTime?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  branch           Branch                @relation(fields: [branchId], references: [id])
  qualityControl   User                  @relation("quality_control", fields: [qualityControlId], references: [id])
  responsible      User?                 @relation("responsible", fields: [responsibleId], references: [id])
  role             Role?                 @relation(fields: [roleId], references: [id])
  carticles        TaskCerebroCarticle[]
  attachments      TaskAttachment[]
  workTimeLinks    WorkTimeTask[]
}

model Request {
  id            Int                      @id @default(autoincrement())
  title         String
  description   String?                  @db.Text
  status        RequestStatus            @default(approval)
  requesterId   Int
  responsibleId Int
  branchId      Int
  createTodo    Boolean                  @default(false)
  dueDate       DateTime?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  branch        Branch                   @relation(fields: [branchId], references: [id])
  requester     User                     @relation("requester", fields: [requesterId], references: [id])
  responsible   User                     @relation("responsible", fields: [responsibleId], references: [id])
  carticles     RequestCerebroCarticle[]
  attachments   RequestAttachment[]
}

model Settings {
  id                      Int      @id @default(autoincrement())
  userId                  Int      @unique
  companyLogo             String?
  darkMode                Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  sidebarCollapsed        Boolean  @default(false)
  user                    User     @relation(fields: [userId], references: [id])
}

model UserTableSettings {
  id            Int      @id @default(autoincrement())
  userId        Int
  tableId       String
  columnOrder   String
  hiddenColumns String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, tableId])
}

model SavedFilter {
  id        Int      @id @default(autoincrement())
  userId    Int
  tableId   String
  name      String
  conditions String
  operators String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, tableId, name])
}

model Notification {
  id                Int              @id @default(autoincrement())
  userId            Int
  title             String
  message           String
  type              NotificationType
  read              Boolean          @default(false)
  relatedEntityId   Int?
  relatedEntityType String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  carticleId        Int?
  carticle          CerebroCarticle? @relation(fields: [carticleId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                  Int      @id @default(autoincrement())
  taskCreate          Boolean  @default(true)
  taskUpdate          Boolean  @default(true)
  taskDelete          Boolean  @default(true)
  taskStatusChange    Boolean  @default(true)
  requestCreate       Boolean  @default(true)
  requestUpdate       Boolean  @default(true)
  requestDelete       Boolean  @default(true)
  requestStatusChange Boolean  @default(true)
  userCreate          Boolean  @default(true)
  userUpdate          Boolean  @default(true)
  userDelete          Boolean  @default(true)
  roleCreate          Boolean  @default(true)
  roleUpdate          Boolean  @default(true)
  roleDelete          Boolean  @default(true)
  worktimeStart       Boolean  @default(true)
  worktimeStop        Boolean  @default(true)
  worktimeAutoStop    Boolean  @default(true)
  worktimeManagerStop Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  carticleCreate      Boolean  @default(true)
  carticleDelete      Boolean  @default(true)
  carticleLink        Boolean  @default(true)
  carticleMention     Boolean  @default(true)
  carticleUpdate      Boolean  @default(true)
}

model UserNotificationSettings {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  taskCreate          Boolean?
  taskUpdate          Boolean?
  taskDelete          Boolean?
  taskStatusChange    Boolean?
  requestCreate       Boolean?
  requestUpdate       Boolean?
  requestDelete       Boolean?
  requestStatusChange Boolean?
  userCreate          Boolean?
  userUpdate          Boolean?
  userDelete          Boolean?
  roleCreate          Boolean?
  roleUpdate          Boolean?
  roleDelete          Boolean?
  worktimeStart       Boolean?
  worktimeStop        Boolean?
  worktimeAutoStop    Boolean? @default(true)
  worktimeManagerStop Boolean?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  carticleCreate      Boolean?
  carticleDelete      Boolean?
  carticleLink        Boolean?
  carticleMention     Boolean?
  carticleUpdate      Boolean?
  user                User     @relation(fields: [userId], references: [id])
}

model EmployeePayroll {
  id                             Int      @id @default(autoincrement())
  userId                         Int
  periodStart                    DateTime
  periodEnd                      DateTime
  regularHours                   Float
  overtimeHours                  Float
  nightHours                     Float
  holidayHours                   Float
  sundayHolidayHours             Float    @default(0)
  overtimeNightHours             Float    @default(0)
  overtimeSundayHolidayHours     Float    @default(0)
  overtimeNightSundayHolidayHours Float   @default(0)
  hourlyRate                     Decimal
  grossPay                       Decimal
  socialSecurity                 Decimal
  taxes                          Decimal
  netPay                         Decimal
  deductions                     Decimal  @default(0)
  currency                       String   @default("CHF")
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  user                           User     @relation(fields: [userId], references: [id])
}

model CerebroCarticle {
  id            Int                      @id @default(autoincrement())
  title         String
  content       String?
  slug          String                   @unique
  parentId      Int?
  createdById   Int
  updatedById   Int?
  isPublished   Boolean                  @default(false)
  position      Int?                     @default(999)
  githubPath    String?                  // Pfad zur GitHub Markdown-Datei, falls vorhanden
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  createdBy     User                     @relation("CarticleCreator", fields: [createdById], references: [id])
  parent        CerebroCarticle?         @relation("Hierarchy", fields: [parentId], references: [id])
  children      CerebroCarticle[]        @relation("Hierarchy")
  updatedBy     User?                    @relation("CarticleUpdater", fields: [updatedById], references: [id])
  externalLinks CerebroExternalLink[]
  media         CerebroMedia[]
  notifications Notification[]
  requests      RequestCerebroCarticle[]
  tasks         TaskCerebroCarticle[]
  tags          CerebroTag[]             @relation("CerebroCarticleToCerebroTag")
}

model TaskCerebroCarticle {
  id         Int             @id @default(autoincrement())
  taskId     Int
  carticleId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  carticle   CerebroCarticle @relation(fields: [carticleId], references: [id])
  task       Task            @relation(fields: [taskId], references: [id])

  @@unique([taskId, carticleId])
}

model RequestCerebroCarticle {
  id         Int             @id @default(autoincrement())
  requestId  Int
  carticleId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  carticle   CerebroCarticle @relation(fields: [carticleId], references: [id])
  request    Request         @relation(fields: [requestId], references: [id])

  @@unique([requestId, carticleId])
}

model CerebroMedia {
  id          Int             @id @default(autoincrement())
  path        String
  filename    String
  mimetype    String
  size        Int
  carticleId  Int
  createdById Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  carticle    CerebroCarticle @relation(fields: [carticleId], references: [id])
  createdBy   User            @relation(fields: [createdById], references: [id])
}

model CerebroExternalLink {
  id          Int             @id @default(autoincrement())
  url         String
  title       String?
  type        String
  carticleId  Int
  createdById Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  carticle    CerebroCarticle @relation(fields: [carticleId], references: [id])
  createdBy   User            @relation(fields: [createdById], references: [id])
}

model CerebroTag {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  carticles CerebroCarticle[] @relation("CerebroCarticleToCerebroTag")
}

model TaskAttachment {
  id          Int      @id @default(autoincrement())
  taskId      Int
  fileName    String
  fileType    String
  fileSize    Int
  filePath    String
  uploadedAt  DateTime @default(now())
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model RequestAttachment {
  id          Int      @id @default(autoincrement())
  requestId   Int
  fileName    String
  fileType    String
  fileSize    Int
  filePath    String
  uploadedAt  DateTime @default(now())
  request     Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model IdentificationDocument {
  id                 Int       @id @default(autoincrement())
  userId             Int
  user               User      @relation(fields: [userId], references: [id])
  documentType       String    // z.B. passport, national_id, etc.
  documentNumber     String
  issueDate          DateTime?
  expiryDate         DateTime?
  issuingCountry     String
  issuingAuthority   String?
  documentFile       String?
  isVerified         Boolean   @default(false)
  verificationDate   DateTime?
  verifiedBy         Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([userId, documentType])
}

model Client {
  id          Int        @id @default(autoincrement())
  name        String
  company     String?
  email       String?
  phone       String?
  address     String?
  notes       String?    @db.Text
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workTimes   WorkTime[]
  consultationInvoices  ConsultationInvoice[]
  monthlyReportItems MonthlyConsultationReportItem[]
}

model ConsultationInvoice {
  id                    Int                      @id @default(autoincrement())
  invoiceNumber         String                   @unique
  clientId              Int
  userId                Int                     // Berater
  issueDate             DateTime                 @default(now())
  dueDate               DateTime
  status                InvoiceStatus            @default(DRAFT)
  subtotal              Decimal                  @db.Decimal(10, 2)
  vatRate               Decimal?                 @db.Decimal(5, 2)
  vatAmount             Decimal?                 @db.Decimal(10, 2)
  total                 Decimal                  @db.Decimal(10, 2)
  currency              String                   @default("CHF")
  paymentTerms          String                   @default("30 Tage netto")
  notes                 String?                  @db.Text
  pdfPath               String?
  qrReference           String?                  // QR-Referenznummer
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  
  client                Client                   @relation(fields: [clientId], references: [id])
  user                  User                     @relation(fields: [userId], references: [id])
  items                 ConsultationInvoiceItem[]
  payments              InvoicePayment[]
}

model ConsultationInvoiceItem {
  id                    Int                      @id @default(autoincrement())
  invoiceId             Int
  workTimeId            Int
  description           String
  quantity              Decimal                  @db.Decimal(10, 2) // Stunden
  unitPrice             Decimal                  @db.Decimal(10, 2) // Stundensatz
  amount                Decimal                  @db.Decimal(10, 2) // Total
  createdAt             DateTime                 @default(now())
  
  invoice               ConsultationInvoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  workTime              WorkTime                 @relation(fields: [workTimeId], references: [id])
  
  @@unique([invoiceId, workTimeId]) // Verhindert doppelte Abrechnung
}

model InvoicePayment {
  id                    Int                      @id @default(autoincrement())
  invoiceId             Int
  amount                Decimal                  @db.Decimal(10, 2)
  paymentDate           DateTime
  paymentMethod         String
  reference             String?
  notes                 String?
  createdAt             DateTime                 @default(now())
  
  invoice               ConsultationInvoice      @relation(fields: [invoiceId], references: [id])
}

model InvoiceSettings {
  id                    Int                      @id @default(autoincrement())
  userId                Int                      @unique
  companyName           String
  companyAddress        String
  companyZip            String
  companyCity           String
  companyCountry        String                   @default("CH")
  companyPhone          String?
  companyEmail          String?
  companyWebsite        String?
  vatNumber             String?
  iban                  String
  bankName              String?
  defaultHourlyRate     Decimal                  @db.Decimal(10, 2)
  defaultVatRate        Decimal?                 @db.Decimal(5, 2)
  invoicePrefix         String                   @default("INV")
  nextInvoiceNumber     Int                      @default(1)
  footerText            String?                  @db.Text
  monthlyReportEnabled  Boolean                  @default(false)
  monthlyReportDay      Int                      @default(25)
  monthlyReportRecipient String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  
  user                  User                     @relation(fields: [userId], references: [id])
}

model MonthlyConsultationReport {
  id                Int                           @id @default(autoincrement())
  userId            Int                          // Berater
  reportNumber      String                       @unique
  periodStart       DateTime                     // Beginn des Abrechnungszeitraums
  periodEnd         DateTime                     // Ende des Abrechnungszeitraums
  recipient         String                       // Rechnungsempf√§nger
  totalHours        Decimal                      @db.Decimal(10, 2)
  totalAmount       Decimal?                     @db.Decimal(10, 2)
  currency          String                       @default("CHF")
  pdfPath           String?
  status            MonthlyReportStatus          @default(GENERATED)
  generatedAt       DateTime                     @default(now())
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  
  user              User                         @relation(fields: [userId], references: [id])
  items             MonthlyConsultationReportItem[]
  workTimes         WorkTime[]                   // Verkn√ºpfte WorkTime Eintr√§ge
}

model MonthlyConsultationReportItem {
  id                Int                           @id @default(autoincrement())
  reportId          Int
  clientId          Int
  clientName        String                       // Snapshot des Client-Namens
  totalHours        Decimal                      @db.Decimal(10, 2)
  consultationCount Int                          // Anzahl Beratungen
  createdAt         DateTime                     @default(now())
  
  report            MonthlyConsultationReport    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  client            Client                       @relation(fields: [clientId], references: [id])
}

model WorkTimeTask {
  id          Int       @id @default(autoincrement())
  workTimeId  Int
  taskId      Int
  createdAt   DateTime  @default(now())
  workTime    WorkTime  @relation(fields: [workTimeId], references: [id])
  task        Task      @relation(fields: [taskId], references: [id])
  
  @@unique([workTimeId, taskId])
}

enum TaskStatus {
  open
  in_progress
  improval
  quality_control
  done
}

enum RequestStatus {
  approval
  approved
  to_improve
  denied
}

enum AccessLevel {
  read
  write
  both
  none
}

enum NotificationType {
  task
  request
  user
  role
  worktime
  system
  cerebro
  worktime_manager_stop
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum MonthlyReportStatus {
  GENERATED
  SENT
  ARCHIVED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                       @id @default(autoincrement())
  username                 String                    @unique
  password                 String
  firstName                String
  lastName                 String
  birthday                 DateTime?
  bankDetails              String?
  contract                 String?
  salary                   Float?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  email                    String                    @unique
  notifications            Notification[]
  requestsRequester        Request[]                 @relation("requester")
  requestsResponsible      Request[]                 @relation("responsible")
  settings                 Settings?
  tasksQualityControl      Task[]                    @relation("quality_control")
  tasksResponsible         Task[]                    @relation("responsible")
  userNotificationSettings UserNotificationSettings?
  roles                    UserRole[]
  branches                 UsersBranches[]
  workTimes                WorkTime[]
  payrollCountry           String                    @default("CH")
  hourlyRate               Decimal?
  payrolls                 EmployeePayroll[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  permissions Permission[]
  users       UserRole[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  lastUsed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model Permission {
  id          Int      @id @default(autoincrement())
  roleId      Int
  entity      String   // Früher 'page', jetzt für Seiten und Tabellen
  entityType  String   @default("page") // "page" oder "table"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  accessLevel String
  role        Role     @relation(fields: [roleId], references: [id])
}

model Branch {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  requests  Request[]
  tasks     Task[]
  users     UsersBranches[]
  workTimes WorkTime[]
}

model UsersBranches {
  id        Int      @id @default(autoincrement())
  userId    Int
  branchId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch   @relation(fields: [branchId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, branchId])
}

model WorkTime {
  id        Int       @id @default(autoincrement())
  userId    Int
  branchId  Int
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  branch    Branch    @relation(fields: [branchId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Task {
  id               Int        @id @default(autoincrement())
  title            String
  description      String?
  status           TaskStatus @default(open)
  responsibleId    Int
  qualityControlId Int
  branchId         Int
  dueDate          DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  branch           Branch     @relation(fields: [branchId], references: [id])
  qualityControl   User       @relation("quality_control", fields: [qualityControlId], references: [id])
  responsible      User       @relation("responsible", fields: [responsibleId], references: [id])
}

model Request {
  id            Int           @id @default(autoincrement())
  title         String
  description   String?
  status        RequestStatus @default(approval)
  requesterId   Int
  responsibleId Int
  branchId      Int
  dueDate       DateTime?
  createTodo    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  branch        Branch        @relation(fields: [branchId], references: [id])
  requester     User          @relation("requester", fields: [requesterId], references: [id])
  responsible   User          @relation("responsible", fields: [responsibleId], references: [id])
}

model Settings {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  companyLogo      String?
  darkMode         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  sidebarCollapsed Boolean  @default(false)
  user             User     @relation(fields: [userId], references: [id])
}

model Notification {
  id                Int              @id @default(autoincrement())
  userId            Int
  title             String
  message           String
  type              NotificationType
  read              Boolean          @default(false)
  relatedEntityId   Int?
  relatedEntityType String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                  Int      @id @default(autoincrement())
  taskCreate          Boolean  @default(true)
  taskUpdate          Boolean  @default(true)
  taskDelete          Boolean  @default(true)
  taskStatusChange    Boolean  @default(true)
  requestCreate       Boolean  @default(true)
  requestUpdate       Boolean  @default(true)
  requestDelete       Boolean  @default(true)
  requestStatusChange Boolean  @default(true)
  userCreate          Boolean  @default(true)
  userUpdate          Boolean  @default(true)
  userDelete          Boolean  @default(true)
  roleCreate          Boolean  @default(true)
  roleUpdate          Boolean  @default(true)
  roleDelete          Boolean  @default(true)
  worktimeStart       Boolean  @default(true)
  worktimeStop        Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model UserNotificationSettings {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  taskCreate          Boolean?
  taskUpdate          Boolean?
  taskDelete          Boolean?
  taskStatusChange    Boolean?
  requestCreate       Boolean?
  requestUpdate       Boolean?
  requestDelete       Boolean?
  requestStatusChange Boolean?
  userCreate          Boolean?
  userUpdate          Boolean?
  userDelete          Boolean?
  roleCreate          Boolean?
  roleUpdate          Boolean?
  roleDelete          Boolean?
  worktimeStart       Boolean?
  worktimeStop        Boolean?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])
}

model EmployeePayroll {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  periodStart     DateTime
  periodEnd       DateTime
  regularHours    Float
  overtimeHours   Float
  nightHours      Float
  holidayHours    Float
  hourlyRate      Decimal
  grossPay        Decimal
  socialSecurity  Decimal
  taxes           Decimal
  netPay          Decimal
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum TaskStatus {
  open
  in_progress
  improval
  quality_control
  done
}

enum RequestStatus {
  approval
  approved
  to_improve
  denied
}

enum AccessLevel {
  read
  write
  both
  none
}

enum NotificationType {
  task
  request
  user
  role
  worktime
  system
}
